name: ZAP baseline + full + summary (parallel, GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL objetivo (ej: http://demo.testfire.net)'
        required: false
        default: 'http://demo.testfire.net'
      allow_active_scan:
        description: 'Ejecutar full (active) scan? true/false'
        required: false
        default: 'true'

permissions:
  contents: read

env:
  DEFAULT_TARGET: 'http://demo.testfire.net'
  ZAP_IMAGE: 'ghcr.io/zaproxy/zaproxy:stable'

jobs:
  baseline:
    name: ZAP Baseline (passive - safe)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set TARGET_URL
        run: echo "TARGET_URL=${{ github.event.inputs.target_url || env.DEFAULT_TARGET }}" >> $GITHUB_ENV

      - name: Create reports dir (writable)
        run: |
          mkdir -p zap_reports
          sudo chmod -R 777 zap_reports

      - name: Run ZAP baseline (passive)
        # ZAP devuelve 2 si encuentra issues: no queremos que marque rojo el job.
        continue-on-error: true
        run: |
          docker run --rm -u 0:0 \
            -v "$GITHUB_WORKSPACE/zap_reports":/zap/wrk/:rw \
            $ZAP_IMAGE zap-baseline.py \
            -t "${TARGET_URL}" \
            -r baseline.html -J baseline.json -w baseline.md -d

      - name: Publish Baseline summary (to this page)
        if: always()
        run: |
          echo "## ðŸ”Ž ZAP Baseline â€“ ${TARGET_URL}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "zap_reports/baseline.md" ]; then
            cat zap_reports/baseline.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> ðŸ“Ž Descarga el reporte HTML/JSON en la secciÃ³n **Artifacts** (zap-baseline-report)." >> $GITHUB_STEP_SUMMARY
          else
            echo "_No se generÃ³ baseline.md_" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload baseline report (HTML/JSON/MD)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: zap_reports/baseline.*

  full-scan:
    name: ZAP Full Scan (active) - ENABLE MANUALLY
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.allow_active_scan == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set TARGET_URL
        run: echo "TARGET_URL=${{ github.event.inputs.target_url || env.DEFAULT_TARGET }}" >> $GITHUB_ENV

      - name: Create reports dir (writable)
        run: |
          mkdir -p zap_reports
          sudo chmod -R 777 zap_reports

      - name: Run ZAP full scan (ACTIVE)
        run: |
          docker run --rm -u 0:0 \
            -v "$GITHUB_WORKSPACE/zap_reports":/zap/wrk/:rw \
            $ZAP_IMAGE zap-full-scan.py \
            -t "${TARGET_URL}" \
            -r full.html -J full.json -w full.md -I

      - name: Publish Full Scan summary (to this page)
        if: always()
        run: |
          echo "## ðŸš¨ ZAP Full Scan â€“ ${TARGET_URL}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "zap_reports/full.md" ]; then
            cat zap_reports/full.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> ðŸ“Ž Descarga el reporte HTML/JSON en **Artifacts** (zap-full-report)." >> $GITHUB_STEP_SUMMARY
          else
            echo "_No se generÃ³ full.md_" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload full scan report (HTML/JSON/MD)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-full-report
          path: zap_reports/full.*

      - name: Fail if HIGH/CRITICAL alerts found
        if: always()
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          FILE="zap_reports/full.json"
          if [ ! -f "$FILE" ]; then
            echo "No full.json - skipping severity gate."
            exit 0
          fi
          COUNT=$(jq '[.site[].alerts[] | select(.risk == "High" or .risk == "Critical")] | length' "$FILE")
          echo "High/Critical alerts: $COUNT"
          if [ "$COUNT" -gt 0 ]; then
            echo "High/Critical alerts found - failing workflow."
            exit 1
          fi
